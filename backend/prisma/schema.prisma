datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String @id @default(cuid())
  firstname String
  lastname  String
  email     String @unique
  password  String
}

enum Currency {
  AED
  AFN
  ALL
  AMD
  ANG
  AOA
  ARS
  AUD
  AWG
  AZN
  BAM
  BBD
  BDT
  BGN
  BHD
  BIF
  BMD
  BND
  BOB
  BRL
  BSD
  BTC
  BTN
  BWP
  BYR
  BZD
  CAD
  CDF
  CHF
  CLF
  CLP
  CNY
  COP
  CRC
  CUC
  CUP
  CVE
  CZK
  DJF
  DKK
  DOP
  DZD
  EEK
  EGP
  ERN
  ETB
  EUR
  FJD
  FKP
  GBP
  GEL
  GGP
  GHS
  GIP
  GMD
  GNF
  GTQ
  GYD
  HKD
  HNL
  HRK
  HTG
  HUF
  IDR
  ILS
  IMP
  INR
  IQD
  IRR
  ISK
  JEP
  JMD
  JOD
  JPY
  KES
  KGS
  KHR
  KMF
  KPW
  KRW
  KWD
  KYD
  KZT
  LAK
  LBP
  LKR
  LRD
  LSL
  LTL
  LVL
  LYD
  MAD
  MDL
  MGA
  MKD
  MMK
  MNT
  MOP
  MRO
  MTL
  MUR
  MVR
  MWK
  MXN
  MYR
  MZN
  NAD
  NGN
  NIO
  NOK
  NPR
  NZD
  OMR
  PAB
  PEN
  PGK
  PHP
  PKR
  PLN
  PYG
  QAR
  RON
  RSD
  RUB
  RWF
  SAR
  SBD
  SCR
  SDG
  SEK
  SGD
  SHP
  SLL
  SOS
  SRD
  STD
  SVC
  SYP
  SZL
  THB
  TJS
  TMT
  TND
  TOP
  TRY
  TTD
  TWD
  TZS
  UAH
  UGX
  USD
  UYU
  UZS
  VEF
  VND
  VUV
  WST
  XAF
  XAG
  XAU
  XCD
  XDR
  XOF
  XPD
  XPF
  XPT
  YER
  ZAR
  ZMK
  ZMW
  ZWL
}

model Company {
  id          String   @id @default(cuid())
  name        String
  description String
  currency    Currency @default(EUR)
  legalId     String
  foundedAt   DateTime
  VAT         String
  address     String
  postalCode  String
  city        String
  country     String
  phone       String
  email       String

  quoteStartingNumber   Int    @default(1) // Starting number for quotes
  quoteNumberFormat     String @default("Q-{year}-{number:4}") // Ex: "Q-2025-0001"
  invoiceStartingNumber Int    @default(1) // Starting number for invoices
  invoiceNumberFormat   String @default("INV-{year}-{number:4}") // Ex: "INV-2025-0001"

  invoicePDFFormat String @default("facturx") // Ex: 'pdf' | 'facturx' | 'zugferd' | 'xrechnung' | 'ubl' | 'cii'

  dateFormat String @default("dd/LL/yyyy") // Date format for quotes and invoices

  pDFConfigId      String             @unique
  pdfConfig        PDFConfig          @relation(fields: [pDFConfigId], references: [id])
  Quote            Quote[]
  Invoice          Invoice[]
  emailTemplates   MailTemplate[]
  RecurringInvoice RecurringInvoice[]
}

model PDFConfig {
  id      String   @id @default(cuid())
  Company Company? // ðŸ‘ˆ Relation inverse, sans arguments

  fontFamily     String @default("Arial")
  padding        Int    @default(40)
  primaryColor   String @default("#2563eb")
  secondaryColor String @default("#64748b")

  includeLogo Boolean @default(false)
  logoB64     String?

  invoice        String @default("Invoice")
  quote          String @default("Quote")
  description    String @default("Description:")
  date           String @default("Date:")
  dueDate        String @default("Due date:")
  validUntil     String @default("Valid until:")
  billTo         String @default("Bill to:")
  quoteFor       String @default("Quote for:")
  quantity       String @default("Qty")
  vatRate        String @default("VAT (%)")
  unitPrice      String @default("Unit price")
  subtotal       String @default("Subtotal:")
  total          String @default("Total:")
  vat            String @default("VAT:")
  grandTotal     String @default("Grand total:")
  notes          String @default("Notes:")
  paymentMethod  String @default("Payment Method:")
  paymentDetails String @default("Payment Details:")

  VATId   String @default("VAT")
  legalId String @default("Legal ID")
}

enum MailTemplateType {
  SIGNATURE_REQUEST
  VERIFICATION_CODE
  INVOICE
}

model MailTemplate {
  id        String           @id @default(cuid())
  type      MailTemplateType
  subject   String
  body      String
  company   Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String

  @@unique([companyId, type])
}

model Client {
  id               String             @id @default(cuid())
  name             String
  description      String
  legalId          String? // Legal identification number (SIRET, EIN, etc.)
  VAT              String? // VAT number
  foundedAt        DateTime // Date when the client company was founded
  contactFirstname String
  contactLastname  String
  contactEmail     String             @unique
  contactPhone     String?
  address          String
  postalCode       String
  city             String
  country          String
  currency         Currency?
  isActive         Boolean            @default(true)
  Quote            Quote[]
  Invoice          Invoice[]
  RecurringInvoice RecurringInvoice[]
}

enum QuoteStatus {
  DRAFT
  SENT
  VIEWED
  SIGNED
  EXPIRED
}

model Quote {
  id             String      @id @default(uuid())
  number         Int         @default(autoincrement())
  title          String?
  client         Client      @relation(fields: [clientId], references: [id])
  clientId       String
  company        Company     @relation(fields: [companyId], references: [id])
  companyId      String
  items          QuoteItem[]
  status         QuoteStatus @default(DRAFT)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  validUntil     DateTime?
  signedAt       DateTime?
  viewedAt       DateTime?
  signedBy       String?
  totalHT        Float
  totalVAT       Float
  totalTTC       Float
  currency       Currency
  paymentMethod  String? // Ex: "Bank Transfer", "PayPal", "Cash"
  paymentDetails String? // Details for the payment method (e.g., bank account number)
  notes          String?     @default("")
  isActive       Boolean     @default(true)
  Invoice        Invoice[]
  signatures     Signature[]
}

model QuoteItem {
  id          String @id @default(uuid())
  quote       Quote  @relation(fields: [quoteId], references: [id])
  quoteId     String
  description String
  quantity    Int
  unitPrice   Float
  vatRate     Float // 20 for 20%
  order       Int // For sorting items in the quote pdf
}

enum InvoiceStatus {
  PAID
  UNPAID
  PARTIALLY_PAID
  OVERDUE
  SENT
}

enum RecurrenceFrequency {
  WEEKLY // Every week
  BIWEEKLY // Every 2 weeks
  MONTHLY // Every month
  BIMONTHLY // Every 2 months
  QUARTERLY // Every 3 months
  QUADMONTHLY // Every 4 months
  SEMIANNUALLY // Every 6 months
  ANNUALLY // Every year
}

model RecurringInvoice {
  id                String                 @id @default(uuid())
  client            Client                 @relation(fields: [clientId], references: [id])
  clientId          String
  company           Company                @relation(fields: [companyId], references: [id])
  companyId         String
  items             RecurringInvoiceItem[]
  generatedInvoices Invoice[] // Relation inverse pour les factures gÃ©nÃ©rÃ©es
  paymentMethod     String? // Ex: "Bank Transfer", "PayPal", "Cash"
  paymentDetails    String? // Details for the payment method (e.g., bank account number)
  notes             String?                @default("")
  totalHT           Float
  totalVAT          Float
  totalTTC          Float
  currency          Currency
  frequency         RecurrenceFrequency // Simplified recurrence frequency
  count             Int? // Number of occurrences, null for infinite
  until             DateTime? // End date for the recurrence
  autoSend          Boolean                @default(false) // Auto-send generated invoices
  nextInvoiceDate   DateTime? // Date for the next invoice generation
  lastInvoiceDate   DateTime? // Date of the last generated invoice
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
}

model RecurringInvoiceItem {
  id                 String           @id @default(uuid())
  recurringInvoice   RecurringInvoice @relation(fields: [recurringInvoiceId], references: [id])
  recurringInvoiceId String
  description        String
  quantity           Int
  unitPrice          Float
  vatRate            Float // 20 for 20%
  order              Int
}

model Invoice {
  id                 String            @id @default(uuid())
  number             Int               @default(autoincrement())
  quote              Quote?            @relation(fields: [quoteId], references: [id])
  quoteId            String?
  recurringInvoice   RecurringInvoice? @relation(fields: [recurringInvoiceId], references: [id])
  recurringInvoiceId String?
  client             Client            @relation(fields: [clientId], references: [id]) // Client receiving the invoice
  clientId           String
  company            Company           @relation(fields: [companyId], references: [id]) // Company issuing the invoice
  companyId          String
  items              InvoiceItem[]
  payments           Payment[]         // Multiple payments for partial payment support
  status             InvoiceStatus     @default(UNPAID)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  dueDate            DateTime
  paidAt             DateTime?
  paymentMethod      String? // Ex: "Bank Transfer", "PayPal", "Cash"
  paymentDetails     String? // Details for the payment method (e.g., bank account number)
  notes              String?           @default("")
  totalHT            Float
  totalVAT           Float
  totalTTC           Float
  currency           Currency
  isActive           Boolean           @default(true)
}

model InvoiceItem {
  id          String  @id @default(uuid())
  invoice     Invoice @relation(fields: [invoiceId], references: [id])
  invoiceId   String
  description String
  quantity    Int
  unitPrice   Float
  vatRate     Float // 20 for 20%
  order       Int
}

model Payment {
  id          String   @id @default(uuid())
  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId   String
  amount      Float    // Payment amount
  date        DateTime @default(now()) // When the payment was made
  method      String?  // Payment method (e.g., "Bank Transfer", "Cash", "Credit Card")
  notes       String?  // Additional notes about the payment
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Signature {
  id        String    @id @default(uuid())
  quoteId   String
  signedAt  DateTime?
  expiresAt DateTime?
  otpCode   String?
  otpUsed   Boolean   @default(false)
  quote     Quote     @relation(fields: [quoteId], references: [id])
  isActive  Boolean   @default(true)
}

model CurrencyConversion {
  id           String   @id @default(cuid())
  fromCurrency Currency
  toCurrency   Currency
  rate         Float
  expiresAt    DateTime

  @@unique([fromCurrency, toCurrency])
}
